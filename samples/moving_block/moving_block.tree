data Vector2
  = Vector2 Float Float

data State
  = State Vector2 Vector2

data Input
  = Up
  | Down
  | Left
  | Right
  | NoInput

getX :: Vector2 -> Float
getX (Vector2 x y) = x

getY :: Vector2 -> Float
getY (Vector2 x y) = y

update :: Input -> State ~> State
update input (State (Vector2 x y) (Vector2 vx vy)) =
  let
    accel :: Float
    accel = 0.1

    newVelocity :: Vector2
    newVelocity =
      case input of
        Up ->
          Vector2 vx (vy - accel)
        Down ->
          Vector2 vx (vy + accel)
        Left ->
          Vector2 (vx - accel) vy
        Right ->
          Vector2 (vx + accel) vy
        NoInput ->
          Vector2 vx vy

    newPosition :: Vector2
    newPosition = Vector2 (x + getX newVelocity) (y + getY newVelocity)
  in
    State (newPosition) (newVelocity)

init :: State
init = State (Vector2 80.0 50.0) (Vector2 0.0 0.0)

getPosition :: State -> Vector2
getPosition (State p v) = p

